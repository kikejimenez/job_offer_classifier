# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_k_fold_validation.ipynb (unless otherwise specified).

__all__ = ['k_fold_validation', 'score_averages', 'KFoldPipeline']

# Cell

# export
import sys
from random import random
import numpy as np
import pandas as pd
import sklearn
import logging
logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', level=logging.INFO, datefmt='%I:%M:%S')

from sklearn.model_selection import KFold

from .pipeline_classifier import Pipeline
import tensorflow as tf

# Cell
def k_fold_validation(X,n_splits=4):
    kf = KFold(n_splits=n_splits)
    kf.get_n_splits(X)
    for train_index, test_index in kf.split(X):
        yield X.iloc[train_index], X.iloc[test_index]

# Cell
def score_averages(**k_fold_evaluations):
    fold1 = next(iter(k_fold_evaluations.values()))
    split_names = fold1.keys()
    score_names = next(iter(fold1.values())).keys()
    K = len(k_fold_evaluations)
    return {
        split: {
            score_name: sum(
                k_fold_evaluations[k][split][score_name]
                for k in k_fold_evaluations.keys()
            ) / K
            for score_name in score_names
        }
        for split in split_names
    }

# Cell

class KFoldPipeline(Pipeline):
    '''K fold validation over the model built in `Pipeline` class
    '''
    def __init__(self, dataset_file, n_splits=4):
        self.n_splits = n_splits
        self.k_fold_evaluations = {}
        Pipeline.__init__(self, src_file=dataset_file)

    def k_fold_validation(self):
        ''' Implements the `pipeline` method for each fold.
            The averaged score is stored in `avg_evaluation`
        '''
        for k, split in enumerate(
            k_fold_validation(self.data, n_splits=self.n_splits)
        ):
            self.dfs = {'train': split[0], 'test': split[1]}
            self.pipeline()
            self.k_fold_evaluations[str(k + 1)] = self.evaluation

            logging.info(f'fold {k+1} has finished...')
            for key in ('accuracy','f1_score'):
                logging.info(
                    'The %s score for the training set in fold %s is %s' %
                    (key,k+1,self.evaluation['train'][key])
                )

        self.avg_evaluation = score_averages(**self.k_fold_evaluations)